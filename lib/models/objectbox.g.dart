// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'userModel.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4146890685991255274),
      name: 'UserModel',
      lastPropertyId: const IdUid(9, 8554967565463721754),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 621303513850851979),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 531393416434534525),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1453608147947408640),
            name: 'first_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8166502557979000583),
            name: 'bio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4046411132992302739),
            name: 'pfp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8412441271039992637),
            name: 'cpf',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8368455586272055188),
            name: 'posts',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4597774695684918062),
            name: 'likes',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8554967565463721754),
            name: 'is_staff',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 4146890685991255274),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserModel: EntityDefinition<UserModel>(
        model: _entities[0],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) => {},
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final first_nameOffset = fbb.writeString(object.first_name);
          final bioOffset = fbb.writeString(object.bio);
          final pfpOffset = fbb.writeString(object.pfp);
          final cpfOffset = fbb.writeString(object.cpf);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, first_nameOffset);
          fbb.addOffset(3, bioOffset);
          fbb.addOffset(4, pfpOffset);
          fbb.addOffset(5, cpfOffset);
          fbb.addInt64(6, object.posts);
          fbb.addInt64(7, object.likes);
          fbb.addBool(8, object.is_staff);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserModel(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// see [UserModel.id]
  static final id = QueryIntegerProperty<UserModel>(_entities[0].properties[0]);

  /// see [UserModel.username]
  static final username =
      QueryStringProperty<UserModel>(_entities[0].properties[1]);

  /// see [UserModel.first_name]
  static final first_name =
      QueryStringProperty<UserModel>(_entities[0].properties[2]);

  /// see [UserModel.bio]
  static final bio = QueryStringProperty<UserModel>(_entities[0].properties[3]);

  /// see [UserModel.pfp]
  static final pfp = QueryStringProperty<UserModel>(_entities[0].properties[4]);

  /// see [UserModel.cpf]
  static final cpf = QueryStringProperty<UserModel>(_entities[0].properties[5]);

  /// see [UserModel.posts]
  static final posts =
      QueryIntegerProperty<UserModel>(_entities[0].properties[6]);

  /// see [UserModel.likes]
  static final likes =
      QueryIntegerProperty<UserModel>(_entities[0].properties[7]);

  /// see [UserModel.is_staff]
  static final is_staff =
      QueryBooleanProperty<UserModel>(_entities[0].properties[8]);
}
